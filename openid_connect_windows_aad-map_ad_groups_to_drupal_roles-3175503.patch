diff --git a/openid_connect_windows_aad.module b/openid_connect_windows_aad.module
index 7828f57..976fe9a 100644
--- a/openid_connect_windows_aad.module
+++ b/openid_connect_windows_aad.module
@@ -13,3 +13,158 @@ function openid_connect_windows_aad_ctools_plugin_directory($module, $plugin) {
     return "plugins/$plugin";
   }
 }
+
+/**
+ * Implements hook_openid_connect_post_authorize().
+ */
+function openid_connect_windows_aad_openid_connect_post_authorize($tokens, $account, $userinfo, $client_name, $is_new) {
+  if ($client_name !== 'windows_aad' || !isset($userinfo['groups'])) {
+    return;
+  }
+  try {
+    // Ensure windows_aad auth is enabled and configured for group mapping.
+    $settings = variable_get('openid_connect_client_windows_aad', FALSE);
+    if (!$settings || !$settings['map_ad_groups_to_roles']) {
+      return;
+    }
+  }
+  catch (Exception $exception) {
+    // Not likely to happen but assume windows_aad is not enabled if it does.
+    return;
+  }
+
+  $mapped_roles = $groups = [];
+
+  $user_roles = $account->roles;
+  unset($user_roles[DRUPAL_ANONYMOUS_RID]);
+  unset($user_roles[DRUPAL_AUTHENTICATED_RID]);
+
+  $all_roles = user_roles(TRUE);
+  unset($all_roles[DRUPAL_AUTHENTICATED_RID]);
+
+  // Retrieve a list of previously mapped roles.
+  $user_data = &$account->data;
+  $previous_mapped_roles = $user_data['openid_connect_windows_aad'][$account->uid]['mapped_roles'];
+  if (!isset($previous_mapped_roles)) {
+    $previous_mapped_roles = [];
+  }
+
+  $group_id_key = 'id';
+  // Depending on the API the group data has different keys.
+  if ($settings['userinfo_graph_api_wa'] == 1) {
+    $group_id_key = 'objectId';
+  }
+
+  // Groups found in the userinfo returned from the user info request.
+  if (isset($userinfo['groups']['value'])) {
+    foreach ($userinfo['groups']['value'] as $group) {
+      if ($group['objectType'] !== 'Group') {
+        continue;
+      }
+      $groups[$group['displayName']] = $group['displayName'];
+      if (!isset($groups[$group[$group_id_key]])) {
+        $groups[$group[$group_id_key]] = $group[$group_id_key];
+      }
+    }
+  }
+
+  switch ($settings['group_mapping']['method']) {
+    // Manual mapping.
+    case 1:
+      if (!empty($settings['group_mapping']['mappings'])) {
+        // The mappings is a text area with each line containing the following
+        // format: <role id or label>|<AD Group ID or Label>;<AD Group ID or Label>; ...
+        // Thus we need to split the text out into its components and determine
+        // if there are any roles that should map to this user.
+        $list = explode("\n", $settings['group_mapping']['mappings']);
+        $list = array_map('trim', $list);
+        $list = array_filter($list, 'strlen');
+
+        foreach ($list as $position => $text) {
+          $matches = [];
+          if (preg_match('/(.*)\|(.*)/', $text, $matches)) {
+            // Trim key and value to avoid unwanted spaces issues.
+            $key = trim($matches[1]);
+            if (!$key) {
+              continue;
+            }
+            // Ensure we are dealing with the Role's id and not label.
+            if (!isset($all_roles[$key])) {
+              foreach ($all_roles as $role_key => $role_label) {
+                if ($key === $role_label) {
+                  $key = $role_key;
+                }
+              }
+            }
+            if (!isset($all_roles[$key])) {
+              continue;
+            }
+            // Ensure we end up with a non-empty array of AD groups.
+            $value = trim($matches[2]);
+            $values = explode(';', $value);
+            $values = array_map('trim', $values);
+            if (!$values) {
+              continue;
+            }
+            // If any of the mappings match the user's groups then the user
+            // should be granted the mapped role.
+            if (array_intersect($values, $groups)) {
+              $mapped_roles[$key] = $key;
+            }
+          }
+        }
+      }
+      break;
+
+    // Automatic mapping.
+    default:
+      foreach ($all_roles as $key => $role) {
+        // Only Role labels can be matched to the list of the user's groups.
+        if (in_array($role, $groups)) {
+          $mapped_roles[$key] = $key;
+        }
+      }
+      break;
+  }
+  if ($mapped_roles) {
+    $mapped_roles = array_keys($mapped_roles);
+  }
+
+  // Determine which mapped roles the user does not already have.
+  $add = array_diff($mapped_roles, $user_roles);
+
+  if ($settings['group_mapping']['strict']) {
+    // Strict mode so remove any role the user has that is unmapped.
+    $remove = array_diff($user_roles, $mapped_roles);
+  }
+  else {
+    // Not so strict, only remove roles previously mapped, but no longer are.
+    $remove = array_diff($previous_mapped_roles, $mapped_roles);
+  }
+
+  // Remove Drupal roles the user is no longer permitted to have.
+  foreach ($remove as $rid => $role_label) {
+    if (isset($all_roles[$rid])) {
+      unset($account->roles[$rid]);
+      $vars = [
+        '@role' => $role_label,
+        '@user' => $account->uid,
+      ];
+      watchdog('openid_connect_windows_aad', 'Removed role @role to user @user', $vars);
+    }
+  }
+
+  // Add Drupal roles that the user should be granted.
+  foreach ($add as $rid) {
+    $role = $all_roles[$rid];
+    $account->roles = $account->roles + [$rid => $role];
+    $vars = [
+      '@role' => $role,
+      '@user' => $account->uid,
+    ];
+    watchdog('openid_connect_windows_aad', 'Added role @role to user @user', $vars);
+  }
+
+  $user_data['openid_connect_windows_aad'][$account->uid]['mapped_roles'] = $mapped_roles;
+  user_save($account);
+}
diff --git a/plugins/openid_connect_client/windows_aad/OpenidConnectWindowsAadClient.class.php b/plugins/openid_connect_client/windows_aad/OpenidConnectWindowsAadClient.class.php
index cbf93f5..4f33b3e 100644
--- a/plugins/openid_connect_client/windows_aad/OpenidConnectWindowsAadClient.class.php
+++ b/plugins/openid_connect_client/windows_aad/OpenidConnectWindowsAadClient.class.php
@@ -28,6 +28,49 @@ class OpenidConnectWindowsAadClient extends OpenIDConnectClientBase {
       '#type' => 'textfield',
       '#default_value' => $this->getSetting('token_endpoint_wa', $default_site . '/oauth2/token'),
     );
+    $form['map_ad_groups_to_roles'] = [
+      '#title' => t('Map user\'s AD groups to Drupal roles'),
+      '#type' => 'checkbox',
+      '#default_value' => !empty($this->getSetting('map_ad_groups_to_roles')) ? $this->getSetting('map_ad_groups_to_roles') : '',
+      '#description' => t('Enable this to configure Drupal user role assignment based on AD group membership.'),
+    ];
+    // AD group mapping configuration field set.
+    $form['group_mapping'] = [
+      '#type' => 'fieldset',
+      '#title' => t('AD group mapping options'),
+      '#states' => [
+        'invisible' => [
+          ':input[name="clients[windows_aad][map_ad_groups_to_roles]"]' => ['checked' => FALSE],
+        ],
+      ],
+    ];
+    $form['group_mapping']['method'] = [
+      '#type' => 'radios',
+      '#title' => t('Method for mapping AD groups to roles'),
+      '#options' => [
+        0 => t('Automatic (AD group names or ids identically match Drupal role names)'),
+        1 => t('Manual (Specify which AD groups map to which Drupal roles)'),
+      ],
+      '#default_value' => !empty($this->getSetting('group_mapping')) && !empty($this->getSetting('group_mapping')['method']) ? $this->getSetting('group_mapping')['method'] : 0,
+      '#description' => t('Note: For name mapping to function the Azure AD Graph or Windows Graph APIs must be selected as a User endpoint. Otherwise only mapping based on Group Object IDs can be used.'),
+    ];
+    $form['group_mapping']['mappings'] = [
+      '#title' => t('Manual mappings'),
+      '#type' => 'textarea',
+      '#default_value' => $this->getSetting('group_mapping')['mappings'],
+      '#description' => t('Add one role|group(s) mapping per line. Role and Group should be separated by "|". Multiple groups can be mapped to a single role on the same line using ";" to separate the groups. Ideally you should use the group id since it is immutable, but the title (displayName) may also be used.'),
+      '#states' => [
+        'invisible' => [
+          ':input[name="clients[windows_aad][group_mapping][method]"]' => ['value' => 0],
+        ],
+      ],
+    ];
+    $form['group_mapping']['strict'] = [
+      '#type' => 'checkbox',
+      '#title' => t('Only allow users to have roles that map to an AD group they are a member of.'),
+      '#default_value' => !empty($this->getSetting('group_mapping')) && !empty($this->getSetting('group_mapping')['strict']) ? $this->getSetting('group_mapping')['strict'] : '',
+      '#description' => t('Removes roles from a Drupal user account that do not map to AD groups the user is a member of. Also, with this enabled you can not grant unmapped roles to a user through the usual Drupal user/role interface such as editing a user account. Note: Only affects users with connected AD accounts.'),
+    ];
     $form['userinfo_endpoint_wa'] = array(
       '#title' => t('UserInfo endpoint'),
       '#type' => 'textfield',
@@ -135,6 +178,12 @@ class OpenidConnectWindowsAadClient extends OpenIDConnectClientBase {
 
     drupal_alter('openid_connect_windows_aad_userinfo', $userinfo);
 
+    // If AD group to Drupal role mapping has been enabled then attach group
+    // data from a graph API if configured to do so.
+    if ($this->getSetting('userinfo_graph_api_wa') && $this->getSetting('map_ad_groups_to_roles')) {
+      $userinfo['groups'] = $this->retrieveGroupInfo($access_token);
+    }
+
     // Check to see if we have changed email data, openid_connect doesn't
     // give us the possibility to add a mapping for it, so we do the change
     // now, first checking if this is wanted by checking the setting for it.
@@ -216,4 +265,49 @@ class OpenidConnectWindowsAadClient extends OpenIDConnectClientBase {
 
   }
 
+  /**
+   * Calls a graph api to retrieve teh user's group membership information.
+   *
+   * @param string $access_token
+   *   An access token string.
+   *
+   * @return array
+   *   An array of group information.
+   */
+  protected function retrieveGroupInfo($access_token) {
+    // By default or if an error occurs return empty group information.
+    $group_data = [];
+
+    // Add Graph API as resource if option is set.
+    switch ($this->getSetting('userinfo_graph_api_wa')) {
+      case 1:
+        $url = 'https://graph.windows.net/me/memberOf?api-version=1.6';
+        break;
+
+      default:
+        $url = FALSE;
+        break;
+    }
+    // Perform the request.
+    $options = array(
+      'method' => 'GET',
+      'headers' => array(
+        'Content-Type' => 'application/json',
+        'Authorization' => 'Bearer ' . $access_token,
+      ),
+    );
+    $response = drupal_http_request($url, $options);
+
+    if (in_array($response->code, array(200, 304))) {
+      // Group Information.
+      $group_data = json_decode($response->data, TRUE);
+    }
+    else {
+      watchdog('openid_connect_windows_aad', 'The group info cannot be retrieved from URL: @url. Please check your settings.', array('@url' => $url));
+    }
+
+    // Return group information or an empty array.
+    return $group_data;
+  }
+
 }
